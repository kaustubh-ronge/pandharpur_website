generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enum for Chatbot Role ---
enum Role {
  user
  model
}

model User {
  id          String       @id @default(uuid())
  clerkUserId String       @unique
  name        String?
  email       String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  aiRoutes    AiRoute[]
  aiSchedules AiSchedule[]
  aiTrips     AiTrip[]
  manualTrips ManualTrip[]
  chatSessions ChatSession[] // <-- ADD THIS LINE to your User model
}

model ManualTrip {
  id          String   @id @default(uuid())
  title       String
  startDate   DateTime
  endDate     DateTime
  locations   String
  preferences String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model AiTrip {
  id        String   @id @default(uuid())
  prompt    Json
  response  Json
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model AiRoute {
  id            String   @id @default(uuid())
  startLocation String
  endLocation   String   @default("Pandharpur, Maharashtra, India")
  response      Json
  createdAt     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model AiSchedule {
  id        String   @id @default(uuid())
  prompt    Json
  response  Json
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

// --- Start of New Chatbot Schema ---

model ChatSession {
  id        String        @id @default(uuid())
  userId    String?       // Optional: for logged-in users
  guestId   String?       @unique // Optional: for anonymous users
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User?         @relation(fields: [userId], references: [id])
  messages  ChatMessage[]
}

model ChatMessage {
  id            String      @id @default(uuid())
  role          Role        // 'user' or 'model'
  content       String      // CORRECTED: Removed @db.Text
  createdAt     DateTime    @default(now())
  chatSessionId String
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}

// --- End of New Chatbot Schema ---